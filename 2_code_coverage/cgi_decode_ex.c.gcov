        -:    0:Source:src/cgi_decode_ex.c
        -:    0:Graph:cgi_decode_ex.gcno
        -:    0:Data:cgi_decode_ex.gcda
        -:    0:Runs:1
        -:    1:/* CGI decoding as C program */
        -:    2:
        -:    3:#include <stdlib.h>
        -:    4:#include <string.h>
        -:    5:#include <stdio.h>
        -:    6:
        -:    7:int hex_values[256];
        -:    8:
function init_hex_values called 1 returned 100% blocks executed 100%
        1:    9:void init_hex_values() {
      257:   10:    for (int i = 0; i < sizeof(hex_values) / sizeof(int); i++) {
branch  0 taken 256
branch  1 taken 1 (fallthrough)
      256:   11:        hex_values[i] = -1;
        -:   12:    }
        1:   13:    hex_values['0'] = 0; hex_values['1'] = 1; hex_values['2'] = 2; hex_values['3'] = 3;
        1:   14:    hex_values['4'] = 4; hex_values['5'] = 5; hex_values['6'] = 6; hex_values['7'] = 7;
        1:   15:    hex_values['8'] = 8; hex_values['9'] = 9;
        -:   16:
        1:   17:    hex_values['a'] = 10; hex_values['b'] = 11; hex_values['c'] = 12; hex_values['d'] = 13;
        1:   18:    hex_values['e'] = 14; hex_values['f'] = 15;
        -:   19:
        1:   20:    hex_values['A'] = 10; hex_values['B'] = 11; hex_values['C'] = 12; hex_values['D'] = 13;
        1:   21:    hex_values['E'] = 14; hex_values['F'] = 15;
        1:   22:}
function cgi_decode called 1 returned 100% blocks executed 92%
        1:   23:int cgi_decode(char *s, char *t) {
       32:   24:    while (*s != '\0') {
branch  0 taken 31
branch  1 taken 1 (fallthrough)
       31:   25:        if (*s == '+')
branch  0 taken 3 (fallthrough)
branch  1 taken 28
        3:   26:            *t++ = ' ';
       28:   27:        else if (*s == '%') {
branch  0 taken 1 (fallthrough)
branch  1 taken 27
        1:   28:            int digit_high = *++s;
        1:   29:            int digit_low = *++s;
        1:   30:            if (hex_values[digit_high] >= 0 && hex_values[digit_low] >= 0) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1:   31:                *t++ = hex_values[digit_high] * 16 + hex_values[digit_low];
        -:   32:            }
        -:   33:            else
    #####:   34:                return -1;
        -:   35:        }
        -:   36:        else
       27:   37:            *t++ = *s;
       31:   38:        s++;
        -:   39:    }
        1:   40:    *t = '\0';
        1:   41:    return 0;
        -:   42:}
        -:   43:
function main called 1 returned 100% blocks executed 75%
        1:   44:int main(int argc, char *argv[]) {
        1:   45:    init_hex_values();
call    0 returned 1
        -:   46:
        1:   47:    if (argc >= 2) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   48:        char *s = argv[1];
        1:   49:        char *t = malloc(strlen(s) + 1); /* output is at most as long as input */
        1:   50:        int ret = cgi_decode(s, t);
call    0 returned 1
        1:   51:        printf("%s\n", t);
call    0 returned 1
        1:   52:        return ret;
        -:   53:    }
        -:   54:    else
        -:   55:    {
    #####:   56:        printf("cgi_decode: usage: cgi_decode STRING\n");
call    0 never executed
    #####:   57:        return 1;
        -:   58:    }
        -:   59:}
